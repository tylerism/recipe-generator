<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>The Flavor Fix</title>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
/* Global Styles */
body {
    font-family: 'Arial', sans-serif;
    margin: 0;
    padding: 0;
    background-color: #fefefe;
    color: #333;
    line-height: 1.6;
}

/* Navbar Styles */
.navbar {
    background-color: #ff6347;
    color: white;
    padding: 10px 0;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.navbar .container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}

.navbar .site-title {
    font-size: 1.5rem;
    color: white;
    text-decoration: none;
    font-weight: bold;
}

.navbar .nav-links {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    gap: 15px;
}

.navbar .nav-links li {
    display: inline;
}

.navbar .nav-links a {
    color: white;
    text-decoration: none;
    font-size: 1rem;
    padding: 5px 10px;
    transition: background-color 0.3s ease;
}

.navbar .nav-links a:hover {
    background-color: rgba(255, 255, 255, 0.2);
    border-radius: 5px;
}

/* Header Styles */
header {
    background-color: #ff6347;
    color: white;
    padding: 20px 10px;
    text-align: center;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
}

header h1 {
    font-size: 2.5rem;
    margin: 0;
}

header p {
    margin: 10px 0 0;
    font-size: 1rem;
}

/* Main Content */
main {
    padding: 20px;
    max-width: 800px;
    margin: 0 auto;
}

button {
    display: inline-block;
    background-color: #ff6347;
    color: white;
    padding: 10px 20px;
    font-size: 1rem;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: #e5533d;
}

/* Footer Styles */
footer {
    text-align: center;
    background-color: #333;
    color: white;
    padding: 10px;
    margin-top: 20px;
    font-size: 0.9rem;
}

    </style>
</head>
<body>
    <nav class="navbar">
        <div class="container">
            <a href="/" class="site-title">The Flavor Fix</a>
            <ul class="nav-links">
                <li><a href="/">Home</a></li>
                <li><a href="/recipes">Recipes</a></li>
                <li><a href="/about">About</a></li>
                <li><a href="/contact">Contact</a></li>
            </ul>
        </div>
    </nav>
    <header>
        <h1>{{ message }}</h1>
        <p>Click the button below to generate a delicious recipe using AI!</p>
    </header>
    <main>
        <button id="generate-recipe-btn">Generate Recipe</button>
        <div id="loading-container">
            <div id="loading-bar"></div>
            <div id="loading-text">Starting AI engines...</div>
        </div>
        <div id="recipe-container"></div>
    </main>
    <footer>
        <p>Powered by AI | © 2024 The Flavor Fix</p>
    </footer>
    <script>
        const funnyMessages = [
            "Whisking the data...",
            "Adding a pinch of AI magic...",
            "Sautéing some ideas...",
            "Grating some cheesy jokes...",
            "Simmering creativity...",
            "Plating the recipe...",
            "Garnishing with brilliance..."
        ];

        async function showLoading() {
            const loadingContainer = document.getElementById('loading-container');
            const loadingBar = document.getElementById('loading-bar');
            const loadingText = document.getElementById('loading-text');

            loadingContainer.style.display = 'block';
            loadingBar.style.width = '0';
            loadingText.innerText = funnyMessages[0];

            let step = 0;
            let elapsedTime = 0;
            const totalDuration = 15000; // Minimum 15 seconds
            const startTime = Date.now();

            const updateMessage = () => {
                if (step < funnyMessages.length - 1) {
                    step++;
                    loadingText.innerText = funnyMessages[step];
                    loadingBar.style.width = `${(step / funnyMessages.length) * 100}%`;

                    // Schedule the next update after a random interval
                    const randomInterval = Math.random() * 2000 + 1000; // Random interval between 1-3 seconds
                    elapsedTime = Date.now() - startTime;

                    if (elapsedTime + randomInterval < totalDuration || step < funnyMessages.length - 1) {
                        setTimeout(updateMessage, randomInterval);
                    }
                }
            };

            updateMessage();

            // Ensure the loading lasts at least 15 seconds
            return new Promise(resolve => {
                setTimeout(() => {
                    resolve();
                }, totalDuration);
            });
        }

        document.getElementById('generate-recipe-btn').addEventListener('click', async () => {
            const recipeContainer = document.getElementById('recipe-container');
            recipeContainer.innerHTML = ''; // Clear previous recipe

            // Start the loading animation
            await showLoading();

            // Wait for the Axios request
            axios.post('/generate-recipe')
                .then(response => {
                    const recipe = response.data;
                    console.log(recipe);
                    const container = document.getElementById('recipe-container');
                    container.innerHTML = `
                        <img src="${recipe.image}" alt="Recipe Image" class="recipe-image"/>
                        <h2 class="recipe-title">${recipe.name}</h2>
                        <p class="recipe-description">${recipe.description}</p>
                        <h3>Ingredients:</h3>
                        <ul>${recipe.ingredients.map(ingredient => `<li>${ingredient}</li>`).join('')}</ul>
                        <h3>Steps:</h3>
                        <ol>${recipe.instructions.map(step => `<li>${step}</li>`).join('')}</ol>
                    `;
                })
                .catch(error => {
                    console.error('Error generating recipe:', error);
                })
                .finally(() => {
                    // Hide the loading container after the request is complete
                    const loadingContainer = document.getElementById('loading-container');
                    loadingContainer.style.display = 'none';
                });
        });
    </script>
</body>
</html>
