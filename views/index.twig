<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recipe Generator</title>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
        /* Style for the loading bar container */
        #loading-container {
            display: none;
            margin: 20px 0;
            text-align: center;
        }

        #loading-bar {
            width: 0;
            height: 20px;
            background-color: #4caf50;
            margin: 10px auto;
            transition: width 0.3s ease;
        }

        #loading-text {
            margin-top: 10px;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <h1>{{ message }}</h1>
    <button id="generate-recipe-btn">Generate Recipe</button>
    <div id="loading-container">
        <div id="loading-bar"></div>
        <div id="loading-text">Starting AI engines...</div>
    </div>
    <div id="recipe-container"></div>

    <script>
        const funnyMessages = [
            "Whisking the data...",
            "Adding a pinch of AI magic...",
            "SautÃ©ing some ideas...",
            "Grating some cheesy jokes...",
            "Simmering creativity...",
            "Plating the recipe...",
            "Garnishing with brilliance..."
        ];

        async function showLoading() {
            const loadingContainer = document.getElementById('loading-container');
            const loadingBar = document.getElementById('loading-bar');
            const loadingText = document.getElementById('loading-text');

            loadingContainer.style.display = 'block';
            loadingBar.style.width = '0';
            loadingText.innerText = funnyMessages[0];

            let step = 0;
            let elapsedTime = 0;
            const totalDuration = 15000; // Minimum 15 seconds
            const startTime = Date.now();

            const updateMessage = () => {
                if (step < funnyMessages.length - 1) {
                    step++;
                    loadingText.innerText = funnyMessages[step];
                    loadingBar.style.width = `${(step / funnyMessages.length) * 100}%`;

                    // Schedule the next update after a random interval
                    const randomInterval = Math.random() * 2000 + 1000; // Random interval between 1-3 seconds
                    elapsedTime = Date.now() - startTime;

                    if (elapsedTime + randomInterval < totalDuration || step < funnyMessages.length - 1) {
                        setTimeout(updateMessage, randomInterval);
                    }
                }
            };

            updateMessage();

            // Ensure the loading lasts at least 15 seconds
            return new Promise(resolve => {
                setTimeout(() => {
                    resolve();
                }, totalDuration);
            });
        }

        document.getElementById('generate-recipe-btn').addEventListener('click', async () => {
            const recipeContainer = document.getElementById('recipe-container');
            recipeContainer.innerHTML = ''; // Clear previous recipe

            // Start the loading animation
            await showLoading();

            // Wait for the Axios request
            axios.post('/generate-recipe')
                .then(response => {
                    const recipe = response.data;
                    console.log(recipe);
                    const container = document.getElementById('recipe-container');
                    container.innerHTML = `
                        <img src="${recipe.image}" alt="Recipe Image"/>
                        <h2>${recipe.name}</h2>
                        <p>${recipe.description}</p>
                        <h3>Ingredients:</h3>
                        <ul>${recipe.ingredients.map(ingredient => `<li>${ingredient}</li>`).join('')}</ul>
                        <h3>Steps:</h3>
                        <ol>${recipe.instructions.map(step => `<li>${step}</li>`).join('')}</ol>
                    `;
                })
                .catch(error => {
                    console.error('Error generating recipe:', error);
                })
                .finally(() => {
                    // Hide the loading container after the request is complete
                    const loadingContainer = document.getElementById('loading-container');
                    loadingContainer.style.display = 'none';
                });
        });
    </script>
</body>
</html>
